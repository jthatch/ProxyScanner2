#!/bin/bash
# make sure we export all parameters of this script (don't delete this, ProxyScanner2 won't work without it):

set -a

# Do we want console messages, set to 0 for no or 1 for yes

VERBOSE=1

# Process-related #
# The number of jobs to run with GNU parallel at a time:
# make sure that you provide a soft,hard setting for nofile in /etc/security/limits.conf 
# to allow (eg: 1024000) and set ulimit -n 1024000 before running this script to ensure 
# the upper limit of file handles is well above anything we can reasonably substantiate.
# (on a system with 20 cores + 20 threads and 96GB of memory). This number applies mostly 
# to a curl workload making GET/HEAD requests:

PARALLEL_FORK=500

PARALLEL_NICENESS="-5"

PARALLEL_JOB_NICENESS="-19"

# Backoff/retry Parameters #
## The number of times parallel should retry the command on after a
## non-zero exit status: (NOTE: not as good as curl --retry it seems to wait all before taking 
## another $PARALLEL_FORK, maybe an option to disable that )

PARALLEL_RETRY_COUNT=0

## CURL (presumably S/ACK) timeout but the docs don't really say 
## https://curl.haxx.se/libcurl/c/CURLOPT_CONNECTTIMEOUT.html

CURL_CONNECT_TIMEOUT=1

## The maximum amount of time curl may run:

CURL_OVERALL_TIME_ALLOWED=5

## The number of times curl should retry for transient and server 500 errors
## recieved from the proxy:

CURL_RETRY_COUNT=2 

## The amount of time for curl to wait between retries: 

CURL_RETRY_DELAY=0

# Misc Options #
## Misc GNU Parallel Options

MISC_PARALLEL_OPTS=""

# Directories #
## Parallel uses the $TMPDIR var and is quite I/O heavy given high job counts so I 
## reccomend it above anything else, but by default I use ramdisk for as much as 
## possible. Default designates the base PROXY_SCANNER_WORK_DIR to live on /dev/shm as well. 
## This can be safely changed although I would also specify /dev/shm at least for 
## the TMPDIR. Just added PROXY_SCANNER_HOME_DIR as a place for "somewhat" 
## persistent storage. 

PROXY_SCANNER_HOME_DIR=${HOME}/ProxyScanner

PROXY_SCANNER_WORK_DIR=/dev/shm/proxy_scan
TMPDIR=${PROXY_SCANNER_WORK_DIR}/tmp

HTTP_RESULT_DIR=${PROXY_SCANNER_WORK_DIR}/http_checked
HTTP_CONNECT_RESULT_DIR=${PROXY_SCANNER_WORK_DIR}/http_connect_checked

SOCKS4_RESULT_DIR=${PROXY_SCANNER_WORK_DIR}/socks4_checked
SOCKS5_RESULT_DIR=${PROXY_SCANNER_WORK_DIR}/socks5_checked

OLD_FILES=${PROXY_SCANNER_HOME_DIR}/old_proxy_test_results

COOKIE_JARS=${PROXY_SCANNER_HOME_DIR}/cookie_jars

PARALLEL_JOB_LOGS=${PROXY_SCANNER_HOME_DIR}/job_logs

## Misc curl options
## --tcp-nodelay: Since  7.50.2,  curl sets this option by default and
## you need to explicitly switch it off if you don't want it on:
## --tcp-fastopen (TFO): https://en.wikipedia.org/wiki/TCP_Fast_Open
## --fail (HTTP): Fail silently (no output at all) on server errors.
## This is mostly done to better enable scripts etc to better
## deal with failed attempts. In normal cases when an HTTP server
## fails to deliver a  document, it returns an HTML document stating
## so (which often also describes why and more). This flag will
## prevent curl from outputting that and return error 22

MISC_CURL_OPTS="-s --fail --tcp-nodelay --max-redirs 4 --tcp-fastopen -K /dev/null -q"

## Use the pseudorandom (non-blocking) number generator over other options
## such as EGD, or /dev/random when initiating a TLS session. Certificates in the request path
## are still verified unless -k is specified. This should improve the connection
## rate but that still needs to be confirmed:

MISC_CURL_OPTS=" ${MISC_CURL_OPTS} --random-file /dev/urandom"

# Executables #
# TODO: netcat should be netcat-openbsd 
# TODO: check if installed, all

PARALLEL_BIN=$(which parallel)
CURL_BIN=$(which curl)
JQ_BIN=$(which jq)
XZCAT_BIN=$(which xzcat)
NETCAT_BIN=$(which nc) 
ENV_BIN=$(which env)
BASH_BIN=$(which bash)
GETENT_BIN=$(which getent)
FIND_BIN=$(which find)
NICE_BIN=$(which nice)

# Datestamp format to use for log files #

DATESTAMP_FORMAT="%s"


# You can put plugin-specific configuration parameters in this file as well:

## HAProxy
HAPROXY_ADMIN_SOCKET=/mnt/export/netcrave_docker/var/run/haproxy/haproxy_admin.sock

## resolver
GETENT_ARGS="ahostsv4"
